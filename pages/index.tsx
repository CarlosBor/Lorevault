import Head from 'next/head'
import { useRouter } from 'next/router';
import styles from './index.module.css';
import FilterMenu from '@/components/FilterMenu';
import CardTable from '@/components/CardTable';
import SearchBar from '@/components/SearchBar';
import CardFullScreen from '@/components/CardFullScreen';
import AddItem from '@/components/AddItem';
import ErrorMessage from '@/components/ErrorMessage';
import { useState, useEffect } from 'react';
import ParsedForm from '@/components/ParsedForm';
import DynamicForm from '@/components/DynamicForm';
import theFile from '@/public/assets/DiagForm.json';

//What I want now:

//THEN I can make the elements of the menu do DB calls  
//THEN the side menu into a checkbox that filters results 
//THEN clean up the DB, it ought to be "categories", not "infoType" 
//THEN make it so an empty name search returns all content and filter from there. 
//THEN I can add items to those DB entries
//THEN I can improve the menu to add stuff so it's not a weird different page? 
//THEN I have to remove AddItem from the pages, since it's not a component.
//THEN I have to control the form. Prevent empty fields, add error messages. 
//THEN I can add a header to navigate the site (Lol, Lmao even) 
//THEN I can improve CSS
//THEN I can work on the clickable card functionality 
//THEN I can style things even more because jesus christ it still looks awful
//THEN add error handling? 
//THEN CLEANUP JESUS LORDY <---- IM HERE
//THEN I can work on adding images
//THEN maybe accounts but that's overdoing it


export default function Home() {
  const router = useRouter();
  const [query, setQuery] = useState('');
  const [checkboxInit, setCheckboxInit] = useState<(string | undefined)[]>([]);
  const [cardInfo, setCardInfo] = useState([]);
  const [filteredArray, setFilteredArray] = useState<string[]>([]);
  const [displayAddCard, setDisplayAddCard] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string>('')

  //This is how I make the component read the query URL.
  //Make a "create link" button and use this to share.
    const fetchData = async (query:string, filteredArray:string[]) => {
      let arrayString = "";
      if (filteredArray){
        for(let i=0;filteredArray.length>i;i++){
          arrayString = `${arrayString}&categories=${filteredArray[i]}`;
        }
      }
      const cardInfoQuery = await fetch(`/api/queryLorevault?name=${query}${arrayString}`);
      //This is a query with a search parameter, for future reference
      //    const cardInfoQuery = await fetch(`/api/queryLorevault?productId=${query}`);
      //This parses it into a readable object
      const cardInfoQueryJson = await cardInfoQuery.json();
      if(cardInfoQueryJson.errorMessage){
        setErrorMessage(cardInfoQueryJson.errorMessage);
      }
      setCardInfo(cardInfoQueryJson);
    }

  useEffect(()=>{
    fetchData(query, filteredArray);
  },[query, filteredArray]);

  //Load URL params as query on page load
  useEffect(()=>{
    setQuery(router.query.searchToken?.toString() || '');
    let categoriesToArray = Array.isArray(router.query.categories) ? router.query.categories : [router.query.categories];
    console.log(categoriesToArray);
    setCheckboxInit(categoriesToArray);
  },[router.query]);
  
  //Generate url with params from current search parameters
  const generateLink = () =>{
    let queryString = `${process.env.NEXT_PUBLIC_CURRENT_URL}`;
    if(query){
      queryString = `${queryString}?searchToken=${query}`;
    }
    if(filteredArray.length>0){
      let queryArraySection = "";
      for(let i=0; i<filteredArray.length;i++){
        queryArraySection = `${queryArraySection}&categories=${filteredArray[i]}`;
      }
      if (!query){
        //If there is no query text then the first instance of & ought to be an ? to specify params in the query
        queryArraySection = queryArraySection.replace('&', '?');
      }
      queryString = `${queryString}${queryArraySection}`;
    }
    navigator.clipboard.writeText(queryString);
  }

  const grabFilteredArray = (value:string[]) =>{
    setFilteredArray(value);
  }

  const grabSearchValue = (value: string) => {
    setQuery(value);
  }

  const addCardToggle = () =>{
    setDisplayAddCard(!displayAddCard);
  }

  return (
    <>
      <Head>
        <title>Lorevault</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.testing}>
        <DynamicForm data={theFile}/>
      </div>
      <div className={styles.header}>
          <h2 className={styles.logo}>Lorevault</h2>
          <SearchBar sendSearchValue={grabSearchValue} initialValue={query} generateLink={generateLink}/>
          <button onClick={addCardToggle}>ðŸ““âž•</button>
        </div>
      <main className={styles.main}>
        <FilterMenu sendFilteredArray={grabFilteredArray} checkboxInit={checkboxInit}/> 
        <CardTable cardInfo={cardInfo}/>
        {displayAddCard && 
        <CardFullScreen addCardToggle={addCardToggle}>
          <AddItem/>
        </CardFullScreen>
        }
      </main>
      {errorMessage && <ErrorMessage errorMessageText={errorMessage}/>}
    </>
  )
}
